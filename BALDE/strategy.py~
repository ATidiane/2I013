# -*-coding: utf8 -*
import soccersimulator
from soccersimulator.settings import *
from soccersimulator import SoccerAction, SoccerState, Vector2D, Player
from math import pi
from random import *

#DEFINITION DES CONSTANTES

GOAL_SURFACE_WIDTH = GAME_WIDTH/9.
THIRD_WIDTH = GAME_WIDTH - 50
MEDIUM_WIDTH = GAME_WIDTH/2.
QUARTER_WIDTH = MEDIUM_WIDTH/2.
THREE_QUARTER_WIDTH = MEDIUM_WIDTH + QUARTER_WIDTH
MEDIUM_HEIGHT = GAME_HEIGHT/2.
QUARTER_HEIGHT = MEDIUM_HEIGHT/2.
THREE_QUARTER_HEIGHT = MEDIUM_HEIGHT + QUARTER_HEIGHT

######################################################################################################
#                     Mystate: mes petites strategies ;)
######################################################################################################

class Mystate:
    def __init__(self, state, id_team, id_player):
        self.state = state
        self.id_team = id_team
        self.id_player =id_player

    @property
    def vitesse_ball(self):
        """Vitesse de la balle"""
        return self.state.ball.vitesse

    @property
    def position_ball(self):
        """Position de la balle"""
        return self.state.ball.position

    @property
    def position_player(self):
        """Position du joueur"""
        return self.state.player_state(self.id_team, self.id_player).position

    @property
    def myguys_position(self):
        """Position de tous mes joueurs"""
        lalya = []
        if self.id_team == 1:
            if self.state.nb_players(1) == 1:
                lalya.append(self.state.player_state(1, 0).position)
            elif self.state.nb_players(1) == 2:
                for i in range(2):
                    pos = self.state.player_state(1, i).position
                    lalya.append(pos)
            elif self.state.nb_players(1) == 4:
                for i in range(4):
                    pos = self.state.player_state(1, i).position
                    lalya.append(pos)
        elif self.id_team == 2:
            if self.state.nb_players(2) == 1:
                lalya.append(self.state.player_state(2, 0).position)
            elif self.state.nb_players(2) == 2:
                for i in range(2):
                    pos = self.state.player_state(2, i).position
                    lalya.append(pos)
            elif self.state.nb_players(2) == 4:
                for i in range(4):
                    pos = self.state.player_state(2, i).position
                    lalya.append(pos)
        #Retourne une liste de toutes les positions de mes joueurs, quelque soit la team ou le nombre de joueurs.
        return lalya

    @property
    def adv_position(self):
        """Position de tous mes joueurs"""
        lalya = []
        if self.id_team == 1:
            #state.nb_players prend en paramètre le numéro de la team, donc 1 ou 2
            #et retourne le nombre de joueurs.
            if self.state.nb_players(2) == 1:
                lalya.append(self.state.player_state(2, 0).position)
            elif self.state.nb_players(2) == 2:
                #range(2) si le nombre de joueurs de la team adverse est 2, à noter que self.id_player commence à 0.
                for i in range(2):
                    pos = self.state.player_state(2, i).position
                    #Et on ajoute la position de chancun des joueurs de la team 2(adverse) à la liste.
                    lalya.append(pos)
            elif self.state.nb_players(2) == 4: 
                #range(4) si le nombre de joueurs de la team adverse est 4, à noter que self.id_player commence à 0.
                for i in range(4):
                    pos = self.state.player_state(2, i).position
                    lalya.append(pos)
        elif self.id_team == 2:
            if self.state.nb_players(1) == 1:
                lalya.append(self.state.player_state(1, 0).position)
            elif self.state.nb_players(1) == 2:
                for i in range(2):
                    pos = self.state.player_state(1, i).position
                    lalya.append(pos)
            elif self.state.nb_players(1) == 4:
                for i in range(4):
                    pos = self.state.player_state(1, i).position
                    lalya.append(pos)
        #Retourne une liste de toutes les positions de mes joueurs, quelque soit la team ou le nombre de joueurs.
        return lalya

@property
    def PasseC(self):
        """Le joueur passe à l'équipier le mieux placé pour recevoir le ballon
        C'est à dire dans mon cas, le plus loin d'un joueur adverse, à part le gardien"""
        dist_pos = {}
        lalya = []
        tmpdic = {}
        tmplist = []
        monrg = self.myguys_position
        advrg = self.adv_position
        for i in monrg:
            for j in advrg:
                d = i.distance(j)
                tmpdic[d] = i
            for i in tmpdic.keys():
                tmplist.append(i)
            tmplist.sort()
            dist_pos[tmplist(1)] = i
        for i in dist_pos.keys():
            lalya.append(i)
        lalya.sort()
        pos = dist_pos.get(lalya[-1])
        return pos


######################################################################################################
#Fin des strategies
######################################################################################################
def passeurC(mystate):
    return mystate.PasseC

        
######################################################################################################
#          Miroir: ps un gros problème
######################################################################################################
def miroir_p(p):
    return Vector2D(GAME_WIDTH - p.x, p.y)

def miroir_v(v):
    return Vector2D(-v.x, v.y)

def miroir_socac(action):
    return SoccerAction(miroir_v(action.acceleration), miroir_v(action.shoot))

def miroir_state(s):
    res = s.copy()
    res.ball.position = miroir_p(s.ball.position)
    res.ball.vitesse  = miroir_v(s.ball.vitesse)
    for (id_team, id_player) in s.players:
        res.player_state(id_team, id_player).position = miroir_p(s.player_state(id_team, id_player).position)
        res.player_state(id_team, id_player).vitesse = miroir_v(s.player_state(id_team, id_player).vitesse)
    return res
######################################################################################################
#          Fin de ce beau miroir
######################################################################################################
